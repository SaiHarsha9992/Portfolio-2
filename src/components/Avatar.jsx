/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useFBX, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";

export function Avatar(props) {
  const { animation } = props;
  const group = useRef();
  const { nodes, materials } = useGLTF("models/Harsha.glb");
  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
  const { animations: fallingAnimation } = useFBX(
    "animations/Falling Idle.fbx"
  );
  const { animations: idleAnimation } = useFBX("animations/Idle.fbx");

  typingAnimation[0].name = "Typing";
  fallingAnimation[0].name = "Falling";
  idleAnimation[0].name = "Standing";
  const { actions } = useAnimations(
    [typingAnimation[0], idleAnimation[0], fallingAnimation[0]],
    group
  );

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => {
      actions[animation].reset().fadeOut(0.5);
    };
  }, [animation]);

  const blinkInterval = useRef(null);
  const [isBlinking, setIsBlinking] = useState(false);

  const startBlinking = () => {
    if (blinkInterval.current) clearInterval(blinkInterval.current);
    blinkInterval.current = setInterval(() => {
      setIsBlinking(true);
      setTimeout(() => setIsBlinking(false), 80); // Blink duration
    }, 3000); // Blink every 3 seconds
  };

  useEffect(() => {
    startBlinking();
    return () => clearInterval(blinkInterval.current);
  }, []);

  useFrame(() => {
    // Handle blinking
    if (isBlinking) {
      nodes.AvatarHead001.morphTargetInfluences[
        nodes.AvatarHead001.morphTargetDictionary["eyeBlinkLeft"]
      ] = 1;
      nodes.AvatarHead001.morphTargetInfluences[
        nodes.AvatarHead001.morphTargetDictionary["eyeBlinkRight"]
      ] = 1;
      nodes.AvatarEyelashes001.morphTargetInfluences[
        nodes.AvatarEyelashes001.morphTargetDictionary["eyeBlinkLeft"]
      ] = 1;
      nodes.AvatarEyelashes001.morphTargetInfluences[
        nodes.AvatarEyelashes001.morphTargetDictionary["eyeBlinkRight"]
      ] = 1;
    } else {
      nodes.AvatarHead001.morphTargetInfluences[
        nodes.AvatarHead001.morphTargetDictionary["eyeBlinkLeft"]
      ] = 0;
      nodes.AvatarHead001.morphTargetInfluences[
        nodes.AvatarHead001.morphTargetDictionary["eyeBlinkRight"]
      ] = 0;
      nodes.AvatarEyelashes001.morphTargetInfluences[
        nodes.AvatarEyelashes001.morphTargetDictionary["eyeBlinkLeft"]
      ] = 0;
      nodes.AvatarEyelashes001.morphTargetInfluences[
        nodes.AvatarEyelashes001.morphTargetDictionary["eyeBlinkRight"]
      ] = 0;
    }
  });
  return (
    <group {...props} dispose={null} ref={group}>
      <group>
        <group
          position={[0.053, -0.063, -0.212]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        >
          <skinnedMesh
            frustumCulled={false}
            name="AvatarEyelashes001"
            geometry={nodes.AvatarEyelashes001.geometry}
            material={materials["AvatarEyelashes.001"]}
            skeleton={nodes.AvatarEyelashes001.skeleton}
            morphTargetDictionary={
              nodes.AvatarEyelashes001.morphTargetDictionary
            }
            morphTargetInfluences={
              nodes.AvatarEyelashes001.morphTargetInfluences
            }
          />
          <skinnedMesh
            frustumCulled={false}
            name="AvatarHead001"
            geometry={nodes.AvatarHead001.geometry}
            material={materials.AvatarHead}
            skeleton={nodes.AvatarHead001.skeleton}
            morphTargetDictionary={nodes.AvatarHead001.morphTargetDictionary}
            morphTargetInfluences={nodes.AvatarHead001.morphTargetInfluences}
          />
          <skinnedMesh
            frustumCulled={false}
            geometry={nodes.AvatarLeftEyeball001.geometry}
            material={materials["AvatarRightEyeball.001"]}
            skeleton={nodes.AvatarLeftEyeball001.skeleton}
          />
          <skinnedMesh
            frustumCulled={false}
            geometry={nodes.AvatarRightEyeball001.geometry}
            material={materials["AvatarRightEyeball.001"]}
            skeleton={nodes.AvatarRightEyeball001.skeleton}
          />
          <skinnedMesh
            frustumCulled={false}
            name="AvatarTeethLower001"
            geometry={nodes.AvatarTeethLower001.geometry}
            material={materials.AvatarTeethLower}
            skeleton={nodes.AvatarTeethLower001.skeleton}
            morphTargetDictionary={
              nodes.AvatarTeethLower001.morphTargetDictionary
            }
            morphTargetInfluences={
              nodes.AvatarTeethLower001.morphTargetInfluences
            }
          />
          <skinnedMesh
            frustumCulled={false}
            geometry={nodes.AvatarTeethUpper001.geometry}
            material={materials.AvatarTeethUpper}
            skeleton={nodes.AvatarTeethUpper001.skeleton}
          />
          <skinnedMesh
            frustumCulled={false}
            geometry={nodes.Wolf3D_Outfit_Bottom001.geometry}
            material={materials.Wolf3D_Outfit_Bottom}
            skeleton={nodes.Wolf3D_Outfit_Bottom001.skeleton}
          />
          <skinnedMesh
            frustumCulled={false}
            geometry={nodes.Wolf3D_Outfit_Footwear001.geometry}
            material={materials.Wolf3D_Outfit_Footwear}
            skeleton={nodes.Wolf3D_Outfit_Footwear001.skeleton}
          />
          <skinnedMesh
            frustumCulled={false}
            geometry={nodes.Wolf3D_Outfit_Top001.geometry}
            material={materials.Wolf3D_Outfit_Top}
            skeleton={nodes.Wolf3D_Outfit_Top001.skeleton}
          />
          <primitive object={nodes.mixamorigHips} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("models/Harsha.glb");
